package de.bwueller.environment.actor.api

import java.net.URI
import java.util.*

class ActorApi {

  // TODO: add config

  companion object {

    private var client = Client("my-custom-actor", URI.create("ws://localhost:24499"))

    internal val soundManager = SoundManager(client)
    internal val userManager = UserManager(client)

    private val listeners = mutableListOf<(Boolean) -> Unit>()

    init {
      addListener { connected ->
        if (!connected) {
          Thread({
            Thread.sleep(10000)
            client = Client("my-custom-actor", URI.create("ws://localhost:24499"))
            soundManager.client = client
            userManager.client = client
          }).start()
        }
      }
    }

    internal fun setConnected(connected: Boolean, identifier: UUID?) {
      this.identifier = identifier
      this.isConnected = connected
    }

    /**
     * Defines whether the actor is connected to the processor.
     */
    @JvmStatic
    var isConnected = false
      private set(value) = listeners.forEach { it.invoke(value) }

    /**
     * Defines the unique identifier for this actor generated by the processor. {@code null} if
     * not connected.
     */
    @JvmStatic
    var identifier: UUID? = null
      private set

    /**
     * Adds a listener invoked when the actor connects to or disconnects from the processor.
     *
     * @param listener the listener to invoke.
     */
    @JvmStatic
    fun addListener(listener: (Boolean) -> Unit) {
      listeners.add(listener)
    }

    /**
     * Removes the listener.
     *
     * @param listener the listener to remove.
     */
    @JvmStatic
    fun removeListener(listener: (Boolean) -> Unit) {
      listeners.remove(listener)
    }

    @JvmStatic
    fun registerUser(user: String, callback: (user: String, key: String) -> Unit) = userManager.registerUser(user, callback)

    @JvmStatic
    fun unregisterUser(user: String) = userManager.unregisterUser(user)

    @JvmStatic
    fun isUserRegistered(user: String) = userManager.isUserConnected(user)
  }
}
