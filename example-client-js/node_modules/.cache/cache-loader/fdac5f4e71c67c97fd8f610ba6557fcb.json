{"remainingRequest":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js!/Users/benedikt/custom/environment/example-client-js/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/benedikt/custom/environment/example-client-js/node_modules/buefy/src/components/icon/Icon.vue","dependencies":[{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/buefy/src/components/icon/Icon.vue","mtime":1521642596000},{"path":"/Users/benedikt/custom/environment/example-client-js/package.json","mtime":1525284903126},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/cache-loader/dist/cjs.js","mtime":1525259452936},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport config from '../../utils/config';\nexport default {\n  name: 'BIcon',\n  props: {\n    type: String,\n    pack: String,\n    icon: String,\n    size: String,\n    customSize: String,\n    customClass: String,\n    both: Boolean // This is used internally to show both MDI and FA icon\n\n  },\n\n  data() {\n    return {\n      newPack: this.pack || config.defaultIconPack\n    };\n  },\n\n  computed: {\n    /**\n     * Internal icon name based on the pack.\n     * If pack is 'fa', gets the equivalent FA icon name of the MDI,\n     * internal icons are always MDI.\n     */\n    newIcon() {\n      if (!this.both) {\n        if (this.newPack === 'mdi') {\n          return `${this.newPack}-${this.icon}`;\n        } else {\n          return `fa-${this.icon}`;\n        }\n      }\n\n      return this.newPack === 'mdi' ? `${this.newPack}-${this.icon}` : `fa-${this.getEquivalentIconOf(this.icon)}`;\n    },\n\n    newType() {\n      if (!this.type) return;\n      const splitType = this.type.split('-');\n      if (!splitType.length) return;\n      return `has-text-${splitType[1]}`;\n    },\n\n    newCustomSize() {\n      return this.customSize || this.customSizeByPack;\n    },\n\n    customSizeByPack() {\n      const defaultSize = this.newPack === 'mdi' ? 'mdi-24px' : 'fa-lg';\n      const mediumSize = this.newPack === 'mdi' ? 'mdi-36px' : 'fa-2x';\n      const largeSize = this.newPack === 'mdi' ? 'mdi-48px' : 'fa-3x';\n\n      switch (this.size) {\n        case 'is-small':\n          return;\n\n        case 'is-medium':\n          return mediumSize;\n\n        case 'is-large':\n          return largeSize;\n\n        default:\n          return defaultSize;\n      }\n    }\n\n  },\n  methods: {\n    /**\n     * Equivalent FA icon name of the MDI.\n     */\n    getEquivalentIconOf(value) {\n      switch (value) {\n        case 'check':\n          return 'check';\n\n        case 'information':\n          return 'info-circle';\n\n        case 'check-circle':\n          return 'check-circle';\n\n        case 'alert':\n          return 'exclamation-triangle';\n\n        case 'alert-circle':\n          return 'exclamation-circle';\n\n        case 'arrow-up':\n          return 'arrow-up';\n\n        case 'chevron-right':\n          return 'angle-right';\n\n        case 'chevron-left':\n          return 'angle-left';\n\n        case 'chevron-down':\n          return 'angle-down';\n\n        case 'eye':\n          return 'eye';\n\n        case 'eye-off':\n          return 'eye-slash';\n\n        case 'menu-down':\n          return 'caret-down';\n\n        case 'menu-up':\n          return 'caret-up';\n\n        default:\n          return null;\n      }\n    }\n\n  }\n};",{"version":3,"sources":["Icon.vue"],"names":[],"mappings":";;;;;;AAOA;AAEA;QAEA;;UAEA;UACA;UACA;UACA;gBACA;iBACA;kBACA,AACA;;AARA;;SASA;;mCAEA,AACA;AAFA;AAGA;;;AAEA,AACA,AACA,AACA,AACA;;;;;cACA;sBACA;oCACA;6CACA;eACA;gCACA;AACA;AAEA;;8BACA,oCACA,8CACA;AACA;;cACA;sBAEA;wCACA;6BAEA;qCACA;AACA;;oBACA;qCACA;AACA;;uBACA;2CACA,QACA,aAEA;0CACA,QACA,aAEA;yCACA,QACA,aAEA;;mBACA;;AACA;;;iBACA;;;iBACA;;;iBACA,AACA;;AACA,AACA;;AAlDA;;AAoDA,AACA,AACA;;;+BACA;cACA;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA;;;iBACA,AACA;;AACA,AACA;;AAtBA;AAnEA","file":"Icon.vue","sourceRoot":"node_modules/buefy/src/components/icon","sourcesContent":["<template>\r\n    <span class=\"icon\" :class=\"[newType, size]\">\r\n        <i :class=\"[newPack, newIcon, newCustomSize, customClass]\"/>\r\n    </span>\r\n</template>\r\n\r\n<script>\r\n    import config from '../../utils/config'\r\n\r\n    export default {\r\n        name: 'BIcon',\r\n        props: {\r\n            type: String,\r\n            pack: String,\r\n            icon: String,\r\n            size: String,\r\n            customSize: String,\r\n            customClass: String,\r\n            both: Boolean // This is used internally to show both MDI and FA icon\r\n        },\r\n        data() {\r\n            return {\r\n                newPack: this.pack || config.defaultIconPack\r\n            }\r\n        },\r\n        computed: {\r\n            /**\r\n             * Internal icon name based on the pack.\r\n             * If pack is 'fa', gets the equivalent FA icon name of the MDI,\r\n             * internal icons are always MDI.\r\n             */\r\n            newIcon() {\r\n                if (!this.both) {\r\n                    if (this.newPack === 'mdi') {\r\n                        return `${this.newPack}-${this.icon}`\r\n                    } else {\r\n                        return `fa-${this.icon}`\r\n                    }\r\n                }\r\n\r\n                return this.newPack === 'mdi'\r\n                    ? `${this.newPack}-${this.icon}`\r\n                    : `fa-${this.getEquivalentIconOf(this.icon)}`\r\n            },\r\n            newType() {\r\n                if (!this.type) return\r\n\r\n                const splitType = this.type.split('-')\r\n                if (!splitType.length) return\r\n\r\n                return `has-text-${splitType[1]}`\r\n            },\r\n            newCustomSize() {\r\n                return this.customSize || this.customSizeByPack\r\n            },\r\n            customSizeByPack() {\r\n                const defaultSize = this.newPack === 'mdi'\r\n                    ? 'mdi-24px'\r\n                    : 'fa-lg'\r\n\r\n                const mediumSize = this.newPack === 'mdi'\r\n                    ? 'mdi-36px'\r\n                    : 'fa-2x'\r\n\r\n                const largeSize = this.newPack === 'mdi'\r\n                    ? 'mdi-48px'\r\n                    : 'fa-3x'\r\n\r\n                switch (this.size) {\r\n                    case 'is-small': return\r\n                    case 'is-medium': return mediumSize\r\n                    case 'is-large': return largeSize\r\n                    default: return defaultSize\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * Equivalent FA icon name of the MDI.\r\n             */\r\n            getEquivalentIconOf(value) {\r\n                switch (value) {\r\n                    case 'check': return 'check'\r\n                    case 'information': return 'info-circle'\r\n                    case 'check-circle': return 'check-circle'\r\n                    case 'alert': return 'exclamation-triangle'\r\n                    case 'alert-circle': return 'exclamation-circle'\r\n                    case 'arrow-up': return 'arrow-up'\r\n                    case 'chevron-right': return 'angle-right'\r\n                    case 'chevron-left': return 'angle-left'\r\n                    case 'chevron-down': return 'angle-down'\r\n                    case 'eye': return 'eye'\r\n                    case 'eye-off': return 'eye-slash'\r\n                    case 'menu-down': return 'caret-down'\r\n                    case 'menu-up': return 'caret-up'\r\n                    default: return null\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}