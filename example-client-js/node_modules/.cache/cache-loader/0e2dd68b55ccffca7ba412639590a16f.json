{"remainingRequest":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js!/Users/benedikt/custom/environment/example-client-js/node_modules/eslint-loader/index.js??ref--18-0!/Users/benedikt/custom/environment/example-client-js/src/client.js","dependencies":[{"path":"/Users/benedikt/custom/environment/example-client-js/src/client.js","mtime":1525288157643},{"path":"/Users/benedikt/custom/environment/example-client-js/package.json","mtime":1525284903126},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/cache-loader/dist/cjs.js","mtime":1525259452936},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport Protocol from './protobuf';\nvar socket = new WebSocket('ws://localhost:24500');\nsocket.binaryType = 'arraybuffer';\nvar connectCallback = null;\nvar playSoundCallback = null;\nvar updateVolumeCallback = null;\nvar updateRateCallback = null;\nvar Client = {\n  connected: false,\n  init: function init(callback) {\n    Protocol.init(callback);\n  },\n  connect: function connect(user, key, callback) {\n    if (this.connected || !socket.isOpen) callback(false, 3);\n    connectCallback = callback;\n    var data = Protocol.serialize('ConnectUserRequest', {\n      user: user,\n      key: key\n    });\n    socket.send(data);\n  },\n  setPlaySoundCallback: function setPlaySoundCallback(callback) {\n    playSoundCallback = callback;\n  },\n  setUpdateVolumeCallback: function setUpdateVolumeCallback(callback) {\n    updateVolumeCallback = callback;\n  },\n  setUpdateRateCallback: function setUpdateRateCallback(callback) {\n    updateRateCallback = callback;\n  },\n  handleSoundStarted: function handleSoundStarted(user, sound) {\n    var data = Protocol.serialize('PlaySoundResponse', {\n      user: user,\n      sound: sound\n    });\n    socket.send(data);\n  },\n  handleSoundStopped: function handleSoundStopped(user, sound) {\n    var data = Protocol.serialize('StopSoundResponse', {\n      user: user,\n      sound: sound\n    });\n    socket.send(data);\n  }\n};\n\nsocket.onmessage = function (message) {\n  var packet = Protocol.deserialize(new Uint8Array(message.data));\n\n  if (packet.type === 'ConnectUserResponse' && connectCallback !== null) {\n    if (packet.payload.status === undefined) {\n      connectCallback(true, 0);\n    } else {\n      connectCallback(false, packet.payload.status);\n    }\n  }\n\n  if (packet.type === 'PlaySoundRequest' && playSoundCallback !== null) {\n    playSoundCallback(packet.payload.user, packet.payload.identifier, packet.payload.introSound, packet.payload.mainSound, packet.payload.volume === undefined ? 0.0 : packet.payload.volume, packet.payload.rate === undefined ? 0.0 : packet.payload.rate, packet.payload.loop);\n  }\n\n  if (packet.type === 'UpdateSoundVolumeRequest' && updateVolumeCallback !== null) {\n    updateVolumeCallback(packet.payload.sound, packet.payload.volume === undefined ? 0.0 : packet.payload.volume, packet.payload.duration === undefined ? 0 : packet.payload.duration);\n  }\n\n  if (packet.type === 'UpdateSoundrateRequest' && updateRateCallback !== null) {\n    updateRateCallback(packet.payload.sound, packet.payload.rate);\n  }\n};\n\nsocket.onclose = function () {\n  Client.connected = false;\n  if (connectCallback !== null) connectCallback(false, 3);\n};\n\nexport default Client;",{"version":3,"sources":["src/client.js"],"names":["Protocol","socket","WebSocket","binaryType","connectCallback","playSoundCallback","updateVolumeCallback","updateRateCallback","Client","connected","init","callback","connect","user","key","isOpen","data","serialize","send","setPlaySoundCallback","setUpdateVolumeCallback","setUpdateRateCallback","handleSoundStarted","sound","handleSoundStopped","onmessage","message","packet","deserialize","Uint8Array","type","payload","status","undefined","identifier","introSound","mainSound","volume","rate","loop","duration","onclose"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAMC,SAAS,IAAIC,SAAJ,CAAc,sBAAd,CAAf;AACAD,OAAOE,UAAP,GAAoB,aAApB;AAEA,IAAIC,kBAAkB,IAAtB;AACA,IAAIC,oBAAoB,IAAxB;AACA,IAAIC,uBAAuB,IAA3B;AACA,IAAIC,qBAAqB,IAAzB;AAEA,IAAMC,SAAS;AACbC,aAAW,KADE;AAGbC,MAHa,gBAGRC,QAHQ,EAGE;AACbX,aAASU,IAAT,CAAcC,QAAd;AACD,GALY;AAObC,SAPa,mBAOLC,IAPK,EAOCC,GAPD,EAOMH,QAPN,EAOgB;AAC3B,QAAI,KAAKF,SAAL,IAAkB,CAACR,OAAOc,MAA9B,EAAsCJ,SAAS,KAAT,EAAgB,CAAhB;AACtCP,sBAAkBO,QAAlB;AAEA,QAAMK,OAAOhB,SAASiB,SAAT,CAAmB,oBAAnB,EAAyC;AAACJ,YAAMA,IAAP;AAAaC,WAAKA;AAAlB,KAAzC,CAAb;AACAb,WAAOiB,IAAP,CAAYF,IAAZ;AACD,GAbY;AAebG,sBAfa,gCAeQR,QAfR,EAekB;AAC7BN,wBAAoBM,QAApB;AACD,GAjBY;AAmBbS,yBAnBa,mCAmBWT,QAnBX,EAmBqB;AAChCL,2BAAuBK,QAAvB;AACD,GArBY;AAuBbU,uBAvBa,iCAuBSV,QAvBT,EAuBmB;AAC9BJ,yBAAqBI,QAArB;AACD,GAzBY;AA2BbW,oBA3Ba,8BA2BMT,IA3BN,EA2BYU,KA3BZ,EA2BmB;AAC9B,QAAMP,OAAOhB,SAASiB,SAAT,CAAmB,mBAAnB,EAAwC;AAACJ,YAAMA,IAAP;AAAaU,aAAOA;AAApB,KAAxC,CAAb;AACAtB,WAAOiB,IAAP,CAAYF,IAAZ;AACD,GA9BY;AAgCbQ,oBAhCa,8BAgCMX,IAhCN,EAgCYU,KAhCZ,EAgCmB;AAC9B,QAAMP,OAAOhB,SAASiB,SAAT,CAAmB,mBAAnB,EAAwC;AAACJ,YAAMA,IAAP;AAAaU,aAAOA;AAApB,KAAxC,CAAb;AACAtB,WAAOiB,IAAP,CAAYF,IAAZ;AACD;AAnCY,CAAf;;AAsCAf,OAAOwB,SAAP,GAAmB,UAACC,OAAD,EAAa;AAC9B,MAAMC,SAAS3B,SAAS4B,WAAT,CAAqB,IAAIC,UAAJ,CAAeH,QAAQV,IAAvB,CAArB,CAAf;;AAEA,MAAIW,OAAOG,IAAP,KAAgB,qBAAhB,IAAyC1B,oBAAoB,IAAjE,EAAuE;AACrE,QAAIuB,OAAOI,OAAP,CAAeC,MAAf,KAA0BC,SAA9B,EAAyC;AACvC7B,sBAAgB,IAAhB,EAAsB,CAAtB;AACD,KAFD,MAEO;AACLA,sBAAgB,KAAhB,EAAuBuB,OAAOI,OAAP,CAAeC,MAAtC;AACD;AACF;;AAED,MAAIL,OAAOG,IAAP,KAAgB,kBAAhB,IAAsCzB,sBAAsB,IAAhE,EAAsE;AACpEA,sBAAkBsB,OAAOI,OAAP,CAAelB,IAAjC,EAAuCc,OAAOI,OAAP,CAAeG,UAAtD,EACIP,OAAOI,OAAP,CAAeI,UADnB,EAC+BR,OAAOI,OAAP,CAAeK,SAD9C,EAEIT,OAAOI,OAAP,CAAeM,MAAf,KAA0BJ,SAA1B,GAAsC,GAAtC,GAA4CN,OAAOI,OAAP,CAAeM,MAF/D,EAGIV,OAAOI,OAAP,CAAeO,IAAf,KAAwBL,SAAxB,GAAoC,GAApC,GAA0CN,OAAOI,OAAP,CAAeO,IAH7D,EAIIX,OAAOI,OAAP,CAAeQ,IAJnB;AAKD;;AAED,MAAIZ,OAAOG,IAAP,KAAgB,0BAAhB,IAA8CxB,yBAAyB,IAA3E,EAAiF;AAC/EA,yBAAqBqB,OAAOI,OAAP,CAAeR,KAApC,EACII,OAAOI,OAAP,CAAeM,MAAf,KAA0BJ,SAA1B,GAAsC,GAAtC,GAA4CN,OAAOI,OAAP,CAAeM,MAD/D,EAEIV,OAAOI,OAAP,CAAeS,QAAf,KAA4BP,SAA5B,GAAwC,CAAxC,GAA4CN,OAAOI,OAAP,CAAeS,QAF/D;AAGD;;AAED,MAAIb,OAAOG,IAAP,KAAgB,wBAAhB,IAA4CvB,uBAAuB,IAAvE,EAA6E;AAC3EA,uBAAmBoB,OAAOI,OAAP,CAAeR,KAAlC,EAAyCI,OAAOI,OAAP,CAAeO,IAAxD;AACD;AACF,CA5BD;;AA8BArC,OAAOwC,OAAP,GAAiB,YAAM;AACrBjC,SAAOC,SAAP,GAAmB,KAAnB;AACA,MAAIL,oBAAoB,IAAxB,EAA8BA,gBAAgB,KAAhB,EAAuB,CAAvB;AAC/B,CAHD;;AAKA,eAAeI,MAAf","sourceRoot":"/Users/benedikt/custom/environment/example-client-js","sourcesContent":["import Protocol from './protobuf'\n\nconst socket = new WebSocket('ws://localhost:24500')\nsocket.binaryType = 'arraybuffer'\n\nlet connectCallback = null\nlet playSoundCallback = null\nlet updateVolumeCallback = null\nlet updateRateCallback = null\n\nconst Client = {\n  connected: false,\n\n  init(callback) {\n    Protocol.init(callback)\n  },\n\n  connect(user, key, callback) {\n    if (this.connected || !socket.isOpen) callback(false, 3)\n    connectCallback = callback\n\n    const data = Protocol.serialize('ConnectUserRequest', {user: user, key: key})\n    socket.send(data)\n  },\n\n  setPlaySoundCallback(callback) {\n    playSoundCallback = callback\n  },\n\n  setUpdateVolumeCallback(callback) {\n    updateVolumeCallback = callback\n  },\n\n  setUpdateRateCallback(callback) {\n    updateRateCallback = callback\n  },\n\n  handleSoundStarted(user, sound) {\n    const data = Protocol.serialize('PlaySoundResponse', {user: user, sound: sound})\n    socket.send(data)\n  },\n\n  handleSoundStopped(user, sound) {\n    const data = Protocol.serialize('StopSoundResponse', {user: user, sound: sound})\n    socket.send(data)\n  }\n}\n\nsocket.onmessage = (message) => {\n  const packet = Protocol.deserialize(new Uint8Array(message.data))\n\n  if (packet.type === 'ConnectUserResponse' && connectCallback !== null) {\n    if (packet.payload.status === undefined) {\n      connectCallback(true, 0)\n    } else {\n      connectCallback(false, packet.payload.status)\n    }\n  }\n\n  if (packet.type === 'PlaySoundRequest' && playSoundCallback !== null) {\n    playSoundCallback(packet.payload.user, packet.payload.identifier,\n        packet.payload.introSound, packet.payload.mainSound,\n        packet.payload.volume === undefined ? 0.0 : packet.payload.volume,\n        packet.payload.rate === undefined ? 0.0 : packet.payload.rate,\n        packet.payload.loop)\n  }\n\n  if (packet.type === 'UpdateSoundVolumeRequest' && updateVolumeCallback !== null) {\n    updateVolumeCallback(packet.payload.sound,\n        packet.payload.volume === undefined ? 0.0 : packet.payload.volume,\n        packet.payload.duration === undefined ? 0 : packet.payload.duration)\n  }\n\n  if (packet.type === 'UpdateSoundrateRequest' && updateRateCallback !== null) {\n    updateRateCallback(packet.payload.sound, packet.payload.rate)\n  }\n}\n\nsocket.onclose = () => {\n  Client.connected = false\n  if (connectCallback !== null) connectCallback(false, 3)\n}\n\nexport default Client\n"]}]}