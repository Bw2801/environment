{"remainingRequest":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js!/Users/benedikt/custom/environment/example-client-js/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/benedikt/custom/environment/example-client-js/src/App.vue","dependencies":[{"path":"/Users/benedikt/custom/environment/example-client-js/src/App.vue","mtime":1525347796912},{"path":"/Users/benedikt/custom/environment/example-client-js/package.json","mtime":1525284903126},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/cache-loader/dist/cjs.js","mtime":1525259452936},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/benedikt/custom/environment/example-client-js/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Client from './client';\nimport BNotification from \"buefy/src/components/notification/Notification\";\nimport { Howl, Howler } from 'howler';\nexport default {\n  components: {\n    BNotification: BNotification\n  },\n  name: 'app',\n  props: {\n    connected: false,\n    connectErrorCode: -1,\n    user: null,\n    secret: null,\n    sounds: []\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.user = this.findGetParameter('user');\n    this.secret = this.findGetParameter('key');\n\n    if (this.user === null || this.secret === null) {\n      return;\n    }\n\n    Client.init(function () {\n      Client.setUpdateVolumeCallback(function (identifier, volume, duration) {\n        var obj = _this.sounds.filter(function (item) {\n          return item.id === identifier;\n        })[0];\n\n        obj.howl.fade(obj.howl.volume(), volume, duration);\n      });\n      Client.setPlaySoundCallback(function (user, identifier, introSound, mainSound, volume, rate, loop) {\n        var sound = null;\n\n        _this.$http.get('/sounds/' + mainSound.split('.').join('/') + '.json').then(function (data) {\n          sound = new Howl({\n            src: data.body.sources,\n            loop: loop,\n            volume: volume,\n            rate: rate\n          });\n          sound.once('load', function () {\n            sound.play();\n            Client.handleSoundStarted(user, identifier);\n            var obj = {\n              id: identifier,\n              name: (introSound === undefined ? '' : introSound + '/') + mainSound,\n              license: data.body.license,\n              howl: sound,\n              status: 'playing'\n            };\n\n            _this.sounds.push(obj);\n          });\n          sound.once('end', function () {\n            Client.handleSoundStopped(user, identifier);\n          });\n        });\n      });\n      Client.connect(_this.user, _this.secret, function (connected, code) {\n        if (!_this.connected && connected) {\n          _this.sounds = [];\n        }\n\n        _this.connectErrorCode = code;\n        _this.connected = connected;\n      });\n    });\n  },\n  methods: {\n    findGetParameter: function findGetParameter(parameterName) {\n      var result = null,\n          tmp = [];\n      var items = location.search.substr(1).split(\"&\");\n\n      for (var index = 0; index < items.length; index++) {\n        tmp = items[index].split(\"=\");\n        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\n      }\n\n      return result;\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AAEA;AAEA;;AAEA;;QAEA;;eAEA;uBAEA;UACA;YAEA;YACA,AAEA;AATA;;AAUA;;sCACA;wCAEA;;oDAEA;AACA;AAEA;;4BACA;6EACA;sDACA;6BACA;WAEA;;iDACA;AAEA;yGACA;oBAEA;;oGACA;;2BAEA;kBACA;oBACA;kBACA,AAEA;AANA;yCAOA;kBACA;4CAEA;;kBAEA;yEACA;iCACA;oBACA;sBACA,AAEA;AAPA;;8BAQA;AAEA;wCACA;4CACA;AACA;AACA;AAEA;0EACA;2CACA;yBACA;AAEA;;iCACA;0BACA;AACA;AACA;AAEA;;+DAEA;;gBACA;kDACA;;yDACA;iCACA;sEACA;AACA;;aACA;AACA,AACA;AAVA;AA3EA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <section class=\"hero is-dark\">\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            <small style=\"font-weight: 200\">demo.</small>ENVIRONMENT\n            <span class=\"is-pulled-right\" style=\"font-weight: 200;\">CLIENT</span>\n          </h1>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"section\">\n      <div class=\"container\">\n        <b-notification v-if=\"connectErrorCode === 0\" type=\"is-success\" :closable=\"false\">\n          You are connected as <b>{{ user }}</b>.\n        </b-notification>\n\n        <b-notification v-if=\"connectErrorCode === 1\" type=\"is-danger\" :closable=\"false\">\n          The given user is already connected to the processor.\n        </b-notification>\n\n        <b-notification v-if=\"connectErrorCode === 2\" type=\"is-danger\" :closable=\"false\">\n          The user <b>{{ user }}</b> could not be found or the key is incorrect.\n        </b-notification>\n\n        <b-notification v-if=\"connectErrorCode === 3\" type=\"is-success\" :closable=\"false\">\n          You are connected as {{ user }}\n        </b-notification>\n\n        <div class=\"columns is-multiline\">\n          <div v-for=\"sound in sounds\" v-bind:key=\"sound.id\" class=\"column is-half-tablet\">\n            <div :class=\"{message: true, 'is-success': sound.howl.playing(), 'is-warning': !sound.howl.playing()}\">\n              <div class=\"message-body\">\n                <div class=\"is-clearfix\">\n                  <b>{{ sound.name }}</b>\n                  <div class=\"is-pulled-right\">\n                    <span class=\"tag\"><b>Rate:</b>&nbsp;{{ Math.ceil(sound.howl.rate() * 100) }}%</span>&nbsp;<span class=\"tag\"><b>Volume:</b>&nbsp;{{ Math.ceil(sound.howl.volume() * 100) }}%</span>\n                  </div>\n                </div>\n                <small><small>{{ sound.id }}</small></small><br/>\n                <small><small>{{ sound.license }}</small></small>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n</template>\n\n<script>\n  import Client from './client'\n  import BNotification from \"buefy/src/components/notification/Notification\";\n\n  import {Howl, Howler} from 'howler'\n\n  export default {\n    components: {BNotification},\n    name: 'app',\n\n    props: {\n      connected: false,\n      connectErrorCode: -1,\n\n      user: null,\n      secret: null,\n\n      sounds: [],\n    },\n\n    mounted() {\n      this.user = this.findGetParameter('user')\n      this.secret = this.findGetParameter('key')\n\n      if (this.user === null || this.secret === null) {\n\n        return\n      }\n\n      Client.init(() => {\n        Client.setUpdateVolumeCallback((identifier, volume, duration) => {\n          const obj = this.sounds.filter((item) => {\n            return item.id === identifier\n          })[0]\n\n          obj.howl.fade(obj.howl.volume(), volume, duration)\n        })\n\n        Client.setPlaySoundCallback((user, identifier, introSound, mainSound, volume, rate, loop) => {\n          let sound = null\n\n          this.$http.get('/sounds/' + mainSound.split('.').join('/') + '.json').then((data) => {\n            sound = new Howl({\n              src: data.body.sources,\n              loop: loop,\n              volume: volume,\n              rate: rate\n            });\n\n            sound.once('load', () => {\n              sound.play()\n              Client.handleSoundStarted(user, identifier)\n\n              const obj = {\n                id: identifier,\n                name: (introSound === undefined ? '' : (introSound + '/')) + mainSound,\n                license: data.body.license,\n                howl: sound,\n                status: 'playing'\n              }\n\n              this.sounds.push(obj)\n            })\n\n            sound.once('end', () => {\n              Client.handleSoundStopped(user, identifier)\n            })\n          })\n        })\n\n        Client.connect(this.user, this.secret, (connected, code) => {\n          if (!this.connected && connected) {\n            this.sounds = []\n          }\n\n          this.connectErrorCode = code\n          this.connected = connected\n        })\n      })\n    },\n\n    methods: {\n      findGetParameter(parameterName) {\n        let result = null, tmp = []\n        const items = location.search.substr(1).split(\"&\");\n        for (let index = 0; index < items.length; index++) {\n          tmp = items[index].split(\"=\");\n          if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\n        }\n        return result;\n      }\n    }\n  }\n</script>\n\n<style>\n  html, body, #app {\n    height: 100%;\n    box-sizing: border-box;\n    overflow: auto;\n  }\n</style>\n"]}]}